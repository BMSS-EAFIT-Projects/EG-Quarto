# Chapter 1 – Descriptive Statistics with R & Python
In this chapter we introduce two of the most widely used programming languages for statistical analysis—R and Python.
Each has unique strengths: R offers a rich ecosystem of statistics-first packages (think ggplot2, dplyr, survival),
whereas Python shines for general-purpose data science and machine-learning pipelines (pandas, scikit-learn, TensorFlow).
Mastering both gives you the flexibility to jump between academic research workflows and industry data-science stacks.

We will not discuse the instalation of the required toolchains since there is a lot of good resources to learn this process
so we star with a walk through their basic syntax, data structures, and plotting libraries. Throughout the chapter you will
see side-by-side code snippets, allowing you to translate a task from one language to the other with minimal friction.

By the end of this chapter you will be able to

- Recognize and use basic data types and data structures

- Perform basic operations and import packages

- Perform exploratory analisys of data

- Ploting insights

- 

Mastering these building blocks will prepare you for the next chapters, where we apply R and Python to more advanced
topics such as hypothesis testing, regression modelling, and simulation.


## Getting Started with R and Python
The first step in mastering any programming language is becoming familiar with its syntax—the set of rules that lets you communicate with a computer.
In practice, your code is passed to an interpreter or compiler that translates those human-readable instructions into machine language the hardware can execute.

### Data types.
Before writing any analysis, it’s essential to know the basic **data types** that both R and Python offer.  
In the next code block you’ll see how to **create variables**, **inspect their type**, and **compare the syntax** side by side.

::: {.callout-note title="Example: Data types"}
#### Data types
::: {.panel-tabset}
### R
```{r}
#| label: data_types_r
#| code-fold: true      # ← esto crea el botón “Código”
#| fig-width: 6
#| fig-height: 4
#| message: false
#| warning: false
integer  <- 2L         # L → integer (32-bit)
typeof(integer)        #> integer

double   <- 3.45
typeof(double)         #> double

string   <- "text"
typeof(string)         #> character

logical  <- TRUE
typeof(logical)        #> logical

complex  <- 1 + 2i
typeof(complex)        #> complex

```
### Python
```{python}
#| label: data_types-py
#| code-fold: true      # ← botón “Código”
#| fig-width: 6
#| fig-height: 4
integer  = 2
print(type(integer))    # <class 'int'>

double   = 3.45
print(type(double))     # <class 'float'>

string   = "text"
print(type(string))     # <class 'str'>

boolean  = True
print(type(boolean))    # <class 'bool'>

complex_ = 1 + 2j
print(type(complex_))   # <class 'complex'>

```

:::
:::

**Why do data types matter?**

Every operation you perform on a variable depends on its type. For example, you can’t directly add a character string to a floating-point number because they belong to different data categories. Before combining them, you must convert one type into the other (e.g., cast the number to a string or parse the string as a number). Understanding these constraints—and how each language handles type conversion—prevents bugs and makes your code more readable.

::: {.callout-warning title="Erro: Data types"}
#### Data types error
::: {.panel-tabset}
### R
```{r}
#| label: common error dtype r
#| code-fold: true      # ← esto crea el botón “Código”
#| fig-width: 6
#| fig-height: 4
#| message: false
#| warning: false
#| error: true


"5" + 3      # non-numeric argument to binary operator
```
### Python
```{python}
#| label: common error dtype py
#| code-fold: true      # ← botón “Código”
#| fig-width: 6
#| fig-height: 4
#| error: true

"5" + 3      # TypeError: can only concatenate str (not "int") to str

```

:::
:::

Now that you know the basic types, let's move on to the structures that group them: vectors in R and lists/tuples in Python.

### Data structures.
Data structures allow us to group and organize multiple elements.  In this section we will see how to create and manipulate the most common collections in R and Python, comparing syntax and behaviors.

### Importing packages

### Basic operations
